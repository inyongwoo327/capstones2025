name: Terraform Apply and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform-state:
    name: "Create Terraform State Bucket"
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "eu-west-1"
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::590184075527:role/GitHubActionsRole"
          aws-region: "eu-west-1"
          role-session-name: GitHubActionsOIDCSession

      - name: Terraform Init
        run: terraform init
        working-directory: cicdAWSTerraform/terraform-state

      - name: Terraform Apply
        run: terraform apply --auto-approve
        working-directory: cicdAWSTerraform/terraform-state

      - name: Get State Bucket Name
        id: state-bucket
        run: |
          BUCKET_NAME=$(terraform output -raw state_bucket_name)
          echo "STATE_BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
        working-directory: cicdAWSTerraform/terraform-state

      - name: Terraform Destroy on Apply Failure
        if: failure() && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform destroy --auto-approve
        working-directory: cicdAWSTerraform/terraform-state
  
  terraform-dev:
    name: "Terraform Apply (dev)"
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "eu-west-1"
    strategy:
      matrix:
        env: [dev]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug File Structure
        run: |
          echo "Listing all files in the repository:"
          ls -R
          echo "Listing .tf files in cicdAWSTerraform/terraform:"
          ls cicdAWSTerraform/terraform/*.tf || echo "No .tf files found"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Debug Terraform Installation
        run: |
          echo "Terraform version:"
          terraform --version || echo "Terraform not found"
          echo "PATH:"
          echo $PATH

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::590184075527:role/GitHubActionsRole"
          aws-region: "eu-west-1"
          role-session-name: GitHubActionsOIDCSession

      - name: Verify Terraform
        run: aws sts get-caller-identity

      - name: Terraform Init
        run: terraform init -backend-config="key=env/${{ matrix.env }}/terraform.tfstate" -reconfigure
        working-directory: cicdAWSTerraform/terraform

      - name: Select Workspace
        run: |
          terraform workspace select ${{ matrix.env }} || terraform workspace new ${{ matrix.env }}
        working-directory: cicdAWSTerraform/terraform

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: cicdAWSTerraform/terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: cicdAWSTerraform/terraform

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: timeout 1200 terraform apply --auto-approve
        working-directory: cicdAWSTerraform/terraform

      - name: Terraform Destroy on Apply Failure
        if: failure() && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform destroy --auto-approve
        working-directory: cicdAWSTerraform/terraform

  # deploy-backend:
  #   name: "Deploy Backend (dev)"
  #   runs-on: ubuntu-latest
  #   needs: terraform-dev
  #   permissions:
  #     contents: read
  #     id-token: write
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   strategy:
  #     matrix:
  #       env: [dev]
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Debug OIDC Token
  #       run: |
  #         echo "GITHUB_TOKEN: $GITHUB_TOKEN"
  #         echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN: $ACTIONS_ID_TOKEN_REQUEST_TOKEN"
  #         echo "ACTIONS_ID_TOKEN_REQUEST_URL: $ACTIONS_ID_TOKEN_REQUEST_URL"

  #     - name: Verify AWS Credentials
  #       run: aws sts get-caller-identity

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: "arn:aws:iam::590184075527:role/GitHubActionsRole"
  #         aws-region: "eu-west-1"
  #         role-session-name: GitHubActionsOIDCSession

  #     - name: Install backend dependencies
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: npm install

  #     - name: Package backend
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: zip -r backend.zip .

  #     - name: Deploy backend to S3
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: |
  #         aws s3 cp backend.zip s3://cicdawsterraform-backend-deployment-${{ matrix.env }}/backend.zip

  #     - name: Create or Update Lambda Function
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: |
  #         aws lambda update-function-code --function-name backend-lambda-${{ matrix.env }} --s3-bucket cicdawsterraform-backend-deployment-${{ matrix.env }} --s3-key backend.zip || \
  #         aws lambda create-function \
  #           --function-name backend-lambda-${{ matrix.env }} \
  #           --runtime nodejs20.x \
  #           --role arn:aws:iam::590184075527:role/backend-lambda-${{ matrix.env }}-exec-role \
  #           --handler index.handler \
  #           --environment "Variables={ENVIRONMENT=${{ matrix.env }}}" \
  #           --s3-bucket cicdawsterraform-backend-deployment-${{ matrix.env }} \
  #           --s3-key backend.zip
      
  #     - name: Add API Gateway Permission to Lambda
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: |
  #         aws lambda add-permission \
  #           --function-name backend-lambda-${{ matrix.env }} \
  #           --statement-id AllowAPIGatewayInvoke \
  #           --action lambda:InvokeFunction \
  #           --principal apigateway.amazonaws.com \
  #           --source-arn "arn:aws:execute-api:${AWS_REGION}:590184075527:*/${{ matrix.env }}/*" || \
  #         echo "Permission already exists or function not found"

  # deploy-frontend:
  #   name: "Deploy Frontend (dev)"
  #   runs-on: ubuntu-latest
  #   needs: deploy-backend
  #   permissions:
  #     contents: read
  #     id-token: write
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   strategy:
  #     matrix:
  #       env: [dev]
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: "arn:aws:iam::590184075527:role/GitHubActionsRole"
  #         aws-region: "eu-west-1"
  #         role-session-name: GitHubActionsOIDCSession

  #     - name: Get API Gateway URL
  #       working-directory: ./cicdAWSTerraform/terraform
  #       run: |
  #         API_URL=$(terraform output -raw backend_api_gateway_url)
  #         echo "VITE_API_URL=$API_URL" >> $GITHUB_ENV

  #     - name: Install frontend dependencies
  #       working-directory: ./cicdAWSTerraform/frontend
  #       run: npm install

  #     - name: Build frontend
  #       working-directory: ./cicdAWSTerraform/frontend
  #       env:
  #         VITE_API_URL: ${{ env.VITE_API_URL }}
  #       run: npm run build  # Builds static files for production, no npm run serve needed

  #     - name: Deploy frontend to S3
  #       working-directory: ./cicdAWSTerraform/frontend
  #       run: |
  #         aws s3 sync ./dist/ s3://cicdawsterraform-frontend-deployment-${{ matrix.env }}/ --delete

  #     - name: Invalidate CloudFront cache
  #       working-directory: ./cicdAWSTerraform
  #       run: |
  #         aws cloudfront create-invalidation --distribution-id $(terraform -chdir=terraform output -raw cloudfront_distribution_id) --paths "/*"

  terraform-prod:
    name: "Terraform Apply (prod)"
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "eu-west-1"
    needs: terraform-dev
    strategy:
      matrix:
        env: [prod]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug File Structure
        run: |
          echo "Listing all files in the repository:"
          ls -R
          echo "Listing .tf files in cicdAWSTerraform/terraform:"
          ls cicdAWSTerraform/terraform/*.tf || echo "No .tf files found"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Debug Terraform Installation
        run: |
          echo "Terraform version:"
          terraform --version || echo "Terraform not found"
          echo "PATH:"
          echo $PATH

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::590184075527:role/GitHubActionsRole"
          aws-region: "eu-west-1"
          role-session-name: GitHubActionsOIDCSession

      - name: Verify Terraform
        run: aws sts get-caller-identity

      - name: Terraform Init
        run: terraform init -backend-config="key=env/prod/terraform.tfstate" -reconfigure
        working-directory: cicdAWSTerraform/terraform

      - name: Select Workspace
        run: |
          terraform workspace select ${{ matrix.env }} || terraform workspace new ${{ matrix.env }}
        working-directory: cicdAWSTerraform/terraform

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: cicdAWSTerraform/terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: cicdAWSTerraform/terraform

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: timeout 1200 terraform apply --auto-approve
        working-directory: cicdAWSTerraform/terraform

      - name: Terraform Destroy on Apply Failure
        if: failure() && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform destroy --auto-approve
        working-directory: cicdAWSTerraform/terraform

  # deploy-prod-backend:
  #   name: "Deploy Backend (prod)"
  #   runs-on: ubuntu-latest
  #   needs: terraform-prod
  #   permissions:
  #     contents: read
  #     id-token: write
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   strategy:
  #     matrix:
  #       env: [prod]
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: "arn:aws:iam::590184075527:role/GitHubActionsRole"
  #         aws-region: "eu-west-1"
  #         role-session-name: GitHubActionsOIDCSession

  #     - name: Install backend dependencies
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: npm install

  #     - name: Package backend
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: zip -r backend.zip .

  #     - name: Deploy backend to S3
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: |
  #         aws s3 cp backend.zip s3://cicdawsterraform-backend-deployment-${{ matrix.env }}/backend.zip

  #     - name: Create or Update Lambda Function
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: |
  #         aws lambda update-function-code --function-name backend-lambda-${{ matrix.env }} --s3-bucket cicdawsterraform-backend-deployment-${{ matrix.env }} --s3-key backend.zip || \
  #         aws lambda create-function \
  #           --function-name backend-lambda-${{ matrix.env }} \
  #           --runtime nodejs20.x \
  #           --role arn:aws:iam::590184075527:role/backend-lambda-${{ matrix.env }}-exec-role \
  #           --handler index.handler \
  #           --environment "Variables={ENVIRONMENT=${{ matrix.env }}}" \
  #           --s3-bucket cicdawsterraform-backend-deployment-${{ matrix.env }} \
  #           --s3-key backend.zip
      
  #     - name: Add API Gateway Permission to Lambda
  #       working-directory: ./cicdAWSTerraform/backend
  #       run: |
  #         aws lambda add-permission \
  #           --function-name backend-lambda-${{ matrix.env }} \
  #           --statement-id AllowAPIGatewayInvoke \
  #           --action lambda:InvokeFunction \
  #           --principal apigateway.amazonaws.com \
  #           --source-arn "arn:aws:execute-api:${AWS_REGION}:590184075527:*/${{ matrix.env }}/*" || \
  #         echo "Permission already exists or function not found"

  # deploy-prod-frontend:
  #   name: "Deploy Frontend (prod)"
  #   runs-on: ubuntu-latest
  #   needs: deploy-prod-backend
  #   permissions:
  #     contents: read
  #     id-token: write
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   strategy:
  #     matrix:
  #       env: [prod]
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: "arn:aws:iam::590184075527:role/GitHubActionsRole"
  #         aws-region: "eu-west-1"
  #         role-session-name: GitHubActionsOIDCSession

  #     - name: Get API Gateway URL
  #       working-directory: ./cicdAWSTerraform/terraform
  #       run: |
  #         API_URL=$(terraform output -raw backend_api_gateway_url)
  #         echo "VITE_API_URL=$API_URL" >> $GITHUB_ENV

  #     - name: Install frontend dependencies
  #       working-directory: ./cicdAWSTerraform/frontend
  #       run: npm install

  #     - name: Build frontend
  #       working-directory: ./cicdAWSTerraform/frontend
  #       env:
  #         VITE_API_URL: ${{ env.VITE_API_URL }}
  #       run: npm run build  # Builds static files for production, no npm run serve needed

  #     - name: Deploy frontend to S3
  #       working-directory: ./cicdAWSTerraform/frontend
  #       run: |
  #         aws s3 sync ./dist/ s3://cicdawsterraform-frontend-deployment-${{ matrix.env }}/ --delete

  #     - name: Invalidate CloudFront cache
  #       working-directory: ./cicdAWSTerraform
  #       run: |
  #         aws cloudfront create-invalidation --distribution-id $(terraform -chdir=terraform output -raw cloudfront_distribution_id) --paths "/*"